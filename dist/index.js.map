{"version":3,"sources":["../src/lib/array-field/is.ts","../src/lib/validation-error/create.ts","../src/lib/validation-error/is.ts","../src/lib/validation-error/from-error.ts","../src/lib/validation-error/from-string.ts","../src/lib/validation-error/pipe.ts","../src/lib/validation-error/with-context.ts","../src/lib/validation-error/with-path.ts","../src/lib/validation-error/index.ts","../src/lib/array-field/validate.ts","../src/lib/array-field/valid.ts","../src/lib/array-field/index.ts","../src/lib/boolean-field/is.ts","../src/lib/boolean-field/validate.ts","../src/lib/boolean-field/valid.ts","../src/lib/boolean-field/index.ts","../src/lib/date-field/is.ts","../src/lib/date-field/date-format/iso8601.ts","../src/lib/date-field/validate.ts","../src/lib/date-field/valid.ts","../src/lib/date-field/index.ts","../src/lib/number-field/is.ts","../src/lib/number-field/validate.ts","../src/lib/number-field/valid.ts","../src/lib/number-field/index.ts","../src/lib/object-field/is.ts","../src/lib/object-field/validate.ts","../src/lib/object-field/valid.ts","../src/lib/object-field/index.ts","../src/lib/string-field/is.ts","../src/lib/string-field/validate.ts","../src/lib/string-field/valid.ts","../src/lib/string-field/index.ts","../src/lib/schema-field/validate.ts","../src/lib/schema-field/valid.ts","../src/lib/schema-field/index.ts"],"names":["is","is_default","fromString","pipe","withPath","validate","validate_default","valid","valid_default"],"mappings":";AAEA,IAAM,EAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAqB,IAAS,KAAA,OAAA;AAEhC,IAAO,UAAQ,GAAA,EAAA;;;ACNf,IAAM,SAA2F,CAAC;AAAA,EACjG,KAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA;AACD,CACE,MAAA;AAAA,EACA,IAAM,EAAA,qBAAA;AAAA,EACN,KAAA;AAAA,EACA,OAAA;AAAA,EACA,IAAA;AAAA,EACA;AACD,CAAA,CAAA;AAED,IAAO,cAAQ,GAAA,MAAA;;;ACRf,IAAMA,GAAK,GAAA,CAAC,KACX,KAAA,KAAA,KAAU,UACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,YAChB,KAA0B,CAAA,IAAA,KAAS,qBACpC,IAAA,OAAQ,MAA0B,OAAY,KAAA,QAAA;AAE/C,IAAOC,WAAQD,GAAAA,GAAAA;;;ACLf,IAAM,SAAA,GAAyE,CAC9E,KAAA,EACA,IAAO,GAAA,OAEPC,WAAG,CAAA,KAAK,CACL,GAAA,KAAA,GACA,cAAO,CAAA;AAAA,EACP,KAAO,EAAA,KAAA;AAAA,EACP,SAAS,KAAM,CAAA,OAAA;AAAA,EACf,IAAA;AAAA,EACA,OAAO,KAAM,CAAA;AACd,CAAC,CAAA;AAEJ,IAAO,kBAAQ,GAAA,SAAA;;;ACdf,IAAM,UAAA,GAA2E,CAChF,KAAA,EACA,IAAO,GAAA,EACH,KAAA,cAAA,CAAO,EAAE,OAAA,EAAS,KAAO,EAAA,IAAA,EAAM,CAAA;AAEpC,IAAO,mBAAQ,GAAA,UAAA;;;ACJf,IAAM,IACL,GAAA,CAAA,GAAI,YACJ,KAAA,CAAC,KACA,KAAA,YAAA,CAAa,MAAO,CAAA,CAAC,GAAK,EAAA,SAAA,KAAc,SAAU,CAAA,GAAG,GAAG,KAAK,CAAA;AAG/D,IAAO,YAAQ,GAAA,IAAA;;;ACRf,IAAM,WAA+D,GAAA,CAAC,OAAY,KAAA,CAAC,KAAW,MAAA;AAAA,EAC7F,GAAG,KAAA;AAAA,EACH,OAAS,EAAA,CAAA,EAAG,OAAO,CAAA,EAAA,EAAK,MAAM,OAAO,CAAA;AACtC,CAAA,CAAA;AAEA,IAAO,oBAAQ,GAAA,WAAA;;;ACLf,IAAM,QAAoE,GAAA,CAAC,IAAS,KAAA,CAAC,KAAW,MAAA;AAAA,EAC/F,GAAG,KAAA;AAAA,EACH,MAAM,CAAC,GAAG,IAAM,EAAA,GAAG,MAAM,IAAI;AAC9B,CAAA,CAAA;AAEA,IAAO,iBAAQ,GAAA,QAAA;;;ACLf,IAAM,qBAAwB,GAAA,iBAAA;AAQ9B,IAAM,eAAkB,GAAA;AAAA,EACvB,MAAA,EAAA,cAAA;AAAA,EACA,SAAA,EAAA,kBAAA;AAAA,EACA,UAAA,EAAA,mBAAA;AAAA,EACA,EAAAA,EAAAA,WAAAA;AAAA,EACA,IAAA,EAAA,YAAA;AAAA,EACA,WAAA,EAAA,oBAAA;AAAA,EACA,QAAA,EAAA;AACD,CAAA;AAEA,IAAO,wBAAQ,GAAA,eAAA;;;ACrBf,IAAM,EAAE,UAAAC,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAM,WAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQD,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAAC,UAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMF,WAAW,CAAA,sBAAsB,CAAC,CAAC,CAAA;AAAA;AAGlD,EAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,KAAK,CAAG,EAAA;AAC1B,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,0BAAA,EAA6B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGvE,EAAA,IAAI,MAAM,QAAa,KAAA,KAAA,CAAA,IAAa,KAAM,CAAA,MAAA,GAAS,MAAM,QAAU,EAAA;AAClE,IAAO,MAAA,CAAA,IAAA,CAAK,MAAMA,WAAW,CAAA,CAAA,4BAAA,EAA+B,MAAM,QAAQ,CAAA,MAAA,CAAQ,CAAC,CAAC,CAAA;AAAA;AAGrF,EAAA,IAAI,MAAM,QAAa,KAAA,KAAA,CAAA,IAAa,KAAM,CAAA,MAAA,GAAS,MAAM,QAAU,EAAA;AAClE,IAAO,MAAA,CAAA,IAAA,CAAK,MAAMA,WAAW,CAAA,CAAA,2BAAA,EAA8B,MAAM,QAAQ,CAAA,MAAA,CAAA,EAAU,IAAI,CAAC,CAAC,CAAA;AAAA;AAG1F,EAAM,KAAA,CAAA,OAAA,CAAQ,CAAC,IAAA,EAAM,KAAU,KAAA;AAC9B,IAAA,MAAA,CAAO,IAAK,CAAA,GAAG,WAAY,CAAA,QAAA,CAAS,MAAM,KAAM,CAAA,KAAA,EAAO,CAAC,GAAG,IAAM,EAAA,KAAA,CAAM,QAAS,EAAC,CAAC,CAAC,CAAA;AAAA,GACnF,CAAA;AAED,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAO,gBAAQ,GAAA,QAAA;;;ACjCf,IAAM,KAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4B,iBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAO,aAAQ,GAAA,KAAA;;;ACgBf,IAAM,UAAa,GAAA;AAAA,EAClB,EAAA,EAAA,UAAA;AAAA,EACA,KAAA,EAAA,aAAA;AAAA,EACA,QAAA,EAAA;AACD,CAAA;;;ACtBA,IAAMF,GAAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAuB,IAAS,KAAA,SAAA;AAElC,IAAOC,WAAQD,GAAAA,GAAAA;;;ACLf,IAAM,EAAE,UAAAE,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAACH,WAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMC,WAAW,CAAA,wBAAwB,CAAC,CAAC,CAAA;AAAA;AAGpD,EAAI,IAAA,OAAO,UAAU,SAAW,EAAA;AAC/B,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,4BAAA,EAA+B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGzE,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;ACnBf,IAAME,MAAAA,GAAqD,CAAC,KAAO,EAAA,KAAA,KAClED,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAEnC,IAAOE,cAAQD,GAAAA,MAAAA;;;ACWf,IAAM,YAAe,GAAA;AAAA,EACpB,EAAAN,EAAAA,WAAAA;AAAA,EACA,KAAAO,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD,CAAA;;;AClBA,IAAMN,GAAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAoB,IAAS,KAAA,MAAA;AAE/B,IAAOC,WAAQD,GAAAA,GAAAA;;;ACRf,IAAM,eAAkB,GAAA;AAAA,EACvB,QACC,EAAA,0GAAA;AAAA,EACD,OAAS,EAAA,mBAAA;AAAA,EACT,IAAM,EAAA;AACP,CAAA;AAEA,IAAM,aAAoE,GAAA,CAAC,IAAM,EAAA,IAAA,EAAM,MAAM,CAAM,KAAA;AAElG,EAAA,MAAM,MAAS,GAAA,IAAI,IAAK,CAAA,IAAA,EAAM,GAAG,CAAC,CAAA;AAClC,EAAM,MAAA,YAAA,GAAe,IAAI,IAAA,CAAK,MAAM,CAAA;AAEpC,EAAA,YAAA,CAAa,QAAQ,MAAO,CAAA,OAAA,KAAY,MAAO,CAAA,MAAA,KAAW,CAAC,CAAA;AAG3D,EAAM,MAAA,UAAA,GAAa,IAAI,IAAA,CAAK,YAAY,CAAA;AAExC,EAAW,UAAA,CAAA,OAAA,CAAQ,aAAa,OAAQ,EAAA,GAAA,CAAK,OAAO,CAAK,IAAA,CAAA,IAAK,MAAM,CAAE,CAAA,CAAA;AAGtE,EAAI,IAAA,UAAA,CAAW,WAAY,EAAA,KAAM,IAAM,EAAA;AACtC,IAAM,MAAA,IAAI,MAAM,mBAAmB,CAAA;AAAA;AAGpC,EAAO,OAAA,UAAA;AACR,CAAA;AAEA,IAAM,gBAAA,GAA+D,CAAC,IAAA,EAAM,UAAe,KAAA;AAC1F,EAAA,MAAM,IAAO,GAAA,IAAI,IAAK,CAAA,IAAA,EAAM,GAAG,CAAC,CAAA;AAEhC,EAAA,IAAA,CAAK,QAAQ,UAAU,CAAA;AAGvB,EAAI,IAAA,IAAA,CAAK,WAAY,EAAA,KAAM,IAAM,EAAA;AAChC,IAAM,MAAA,IAAI,MAAM,sBAAsB,CAAA;AAAA;AAGvC,EAAO,OAAA,IAAA;AACR,CAAA;AAEA,IAAM,SAAA,GAA0C,CAAC,UAAe,KAAA;AAC/D,EAAA,MAAM,SAAY,GAAA,UAAA,CAAW,KAAM,CAAA,eAAA,CAAgB,QAAQ,CAAA;AAE3D,EAAA,IAAI,SAAW,EAAA;AACd,IAAA,MAAM,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,EAAA,CAAA,EAAG,EAAI,EAAA,EAAA,EAAI,CAAG,EAAA,IAAA,EAAM,MAAM,CAAI,GAAA,SAAA;AAIxD,IAAM,MAAA,IAAA,GAAO,OAAO,CAAC,CAAA;AACrB,IAAM,MAAA,KAAA,GAAQ,OAAO,CAAC,CAAA;AACtB,IAAM,MAAA,GAAA,GAAM,OAAO,CAAC,CAAA;AACpB,IAAA,MAAM,IAAO,GAAA,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,CAAA;AAC7B,IAAA,MAAM,MAAS,GAAA,GAAA,GAAM,MAAO,CAAA,GAAG,CAAI,GAAA,CAAA;AACnC,IAAA,MAAM,MAAS,GAAA,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,CAAA;AAC/B,IAAA,MAAM,WAAc,GAAA,EAAA,GAAK,MAAO,CAAA,EAAE,CAAI,GAAA,CAAA;AACtC,IAAM,MAAA,UAAA,GAAa,OAAO,MAAO,CAAA,CAAA,EAAG,CAAC,CAAG,EAAA,IAAI,EAAE,CAAI,GAAA,CAAA;AAClD,IAAM,MAAA,YAAA,GAAe,SAAS,MAAO,CAAA,CAAA,EAAG,CAAC,CAAG,EAAA,MAAM,EAAE,CAAI,GAAA,CAAA;AAExD,IAAM,MAAA,IAAA,GAAO,IAAI,IAAA,CAAK,UAAU,CAAA;AAEhC,IAAI,IAAA,IAAA,YAAgB,SAAS,KAAO,EAAA;AACnC,MAAM,MAAA,IAAI,MAAM,uBAAuB,CAAA;AAAA,KAEvC,MAAA,IAAA,IAAA,CAAK,WAAY,EAAA,KAAM,IACvB,IAAA,IAAA,CAAK,QAAS,EAAA,GAAI,CAAM,KAAA,KAAA,IACxB,IAAK,CAAA,OAAA,OAAc,GACnB,IAAA,IAAA,CAAK,QAAS,EAAA,KAAM,IAAO,GAAA,UAAA,IAC3B,IAAK,CAAA,UAAA,OAAiB,MAAS,GAAA,YAAA,IAC/B,IAAK,CAAA,UAAA,EAAiB,KAAA,MAAA,IACtB,IAAK,CAAA,eAAA,OAAsB,WAC1B,EAAA;AACD,MAAM,MAAA,IAAI,MAAM,uBAAuB,CAAA;AAAA,KACjC,MAAA;AACN,MAAO,OAAA,IAAA;AAAA;AACR;AAGD,EAAA,MAAM,SAAY,GAAA,UAAA,CAAW,KAAM,CAAA,eAAA,CAAgB,IAAI,CAAA;AAEvD,EAAA,IAAI,SAAW,EAAA;AACd,IAAA,MAAM,GAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAI,GAAA,SAAA;AAEpB,IAAM,MAAA,IAAA,GAAO,OAAO,CAAC,CAAA;AACrB,IAAM,MAAA,IAAA,GAAO,OAAO,CAAC,CAAA;AACrB,IAAA,MAAM,GAAM,GAAA,CAAA,GAAI,MAAO,CAAA,CAAC,CAAI,GAAA,CAAA;AAE5B,IAAI,IAAA,IAAA,GAAO,CAAK,IAAA,IAAA,GAAO,EAAI,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,qBAAqB,CAAA;AAAA;AAGtC,IAAA,IAAI,SAAS,EAAI,EAAA;AAChB,MAAA,MAAM,KAAQ,GAAA,IAAI,IAAK,CAAA,IAAA,EAAM,IAAI,EAAE,CAAA;AAEnC,MAAA,MAAM,WACL,IAAK,CAAA,KAAA,CAAA,CAAO,KAAM,CAAA,OAAA,KAAY,IAAI,IAAA,CAAK,IAAM,EAAA,CAAA,EAAG,CAAC,CAAE,CAAA,OAAA,EAAc,KAAA,KAAA,GAAW,EAAE,CAAI,GAAA,CAAA;AAEnF,MAAA,IAAI,aAAa,EAAI,EAAA;AACpB,QAAM,MAAA,IAAI,MAAM,qBAAqB,CAAA;AAAA;AACtC;AAGD,IAAO,OAAA,aAAA,CAAc,IAAM,EAAA,IAAA,EAAM,GAAG,CAAA;AAAA;AAGrC,EAAA,MAAM,YAAe,GAAA,UAAA,CAAW,KAAM,CAAA,eAAA,CAAgB,OAAO,CAAA;AAE7D,EAAA,IAAI,YAAc,EAAA;AACjB,IAAA,MAAM,GAAG,CAAG,EAAA,EAAE,CAAI,GAAA,YAAA;AAElB,IAAM,MAAA,IAAA,GAAO,OAAO,CAAC,CAAA;AACrB,IAAM,MAAA,UAAA,GAAa,OAAO,EAAE,CAAA;AAG5B,IAAM,MAAA,UAAA,GAAc,OAAO,CAAM,KAAA,CAAA,IAAK,OAAO,GAAQ,KAAA,CAAA,IAAM,OAAO,GAAQ,KAAA,CAAA;AAC1E,IAAM,MAAA,OAAA,GAAU,aAAa,GAAM,GAAA,GAAA;AAEnC,IAAI,IAAA,UAAA,GAAa,CAAK,IAAA,UAAA,GAAa,OAAS,EAAA;AAC3C,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA;AAAA;AAG7C,IAAO,OAAA,gBAAA,CAAiB,MAAM,UAAU,CAAA;AAAA;AAGzC,EAAM,MAAA,IAAI,MAAM,8BAA8B,CAAA;AAC/C,CAAA;AAEA,IAAM,WAAA,GAA+C,CAAC,IAAS,KAAA;AAC9D,EAAI,IAAA;AACH,IAAO,OAAA,SAAA,CAAU,IAAI,CAAa,YAAA,IAAA;AAAA,GAC3B,CAAA,MAAA;AACP,IAAO,OAAA,KAAA;AAAA;AAET,CAAA;;;AC/HA,IAAM,EAAE,UAAAE,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAACH,WAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMC,WAAW,CAAA,qBAAqB,CAAC,CAAC,CAAA;AAAA;AAGjD,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC9B,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,yBAAA,EAA4B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGtE,EAAA,IAAI,MAAM,MAAW,KAAA,UAAA,IAAc,WAAY,CAAA,KAAK,MAAM,KAAO,EAAA;AAChE,IAAA,MAAA,CAAO,IAAK,CAAA,KAAA,CAAMA,WAAW,CAAA,qBAAqB,CAAC,CAAC,CAAA;AAAA;AAGrD,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;ACzBf,IAAME,MAAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4BD,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAOE,cAAQD,GAAAA,MAAAA;;;ACaf,IAAM,SAAY,GAAA;AAAA,EACjB,EAAAN,EAAAA,WAAAA;AAAA,EACA,KAAAO,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD,CAAA;;;ACnBA,IAAMN,GAAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAsB,IAAS,KAAA,QAAA;AAEjC,IAAOC,WAAQD,GAAAA,GAAAA;;;ACLf,IAAM,EAAE,UAAAE,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAACH,WAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMC,WAAW,CAAA,uBAAuB,CAAC,CAAC,CAAA;AAAA;AAGnD,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC9B,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,2BAAA,EAA8B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGxE,EAAA,IAAI,KAAM,CAAA,GAAA,KAAQ,KAAa,CAAA,IAAA,KAAA,GAAQ,MAAM,GAAK,EAAA;AACjD,IAAO,MAAA,CAAA,IAAA,CAAK,MAAMA,WAAW,CAAA,CAAA,iBAAA,EAAoB,MAAM,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAG/D,EAAA,IAAI,KAAM,CAAA,GAAA,KAAQ,KAAa,CAAA,IAAA,KAAA,GAAQ,MAAM,GAAK,EAAA;AACjD,IAAO,MAAA,CAAA,IAAA,CAAK,MAAMA,WAAW,CAAA,CAAA,iBAAA,EAAoB,MAAM,GAAG,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAG/D,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;AC3Bf,IAAME,MAAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4BD,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAOE,cAAQD,GAAAA,MAAAA;;;ACcf,IAAM,WAAc,GAAA;AAAA,EACnB,EAAAN,EAAAA,WAAAA;AAAA,EACA,KAAAO,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD,CAAA;;;ACpBA,IAAMN,GAAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAsB,IAAS,KAAA,QAAA;AAEjC,IAAOC,WAAQD,GAAAA,GAAAA;;;ACHf,IAAM,EAAE,UAAAE,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAACH,WAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMC,WAAW,CAAA,uBAAuB,CAAC,CAAC,CAAA;AAAA;AAGnD,EAAA,IAAI,UAAU,KAAa,CAAA,IAAA,KAAA,KAAU,IAAQ,IAAA,OAAO,UAAU,QAAU,EAAA;AACvE,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,2BAAA,EAA8B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGxE,EAAM,KAAA,CAAA,QAAA,EAAU,OAAQ,CAAA,CAAC,YAAiB,KAAA;AACzC,IAAI,IAAA,EAAE,gBAAgB,KAAQ,CAAA,EAAA;AAC7B,MAAO,MAAA,CAAA,IAAA,CAAK,KAAMA,CAAAA,WAAAA,CAAW,2BAA6B,EAAA,CAAC,GAAG,IAAM,EAAA,YAAY,CAAC,CAAC,CAAC,CAAA;AAAA;AACpF,GACA,CAAA;AAED,EAAA,IAAI,MAAM,UAAY,EAAA;AACrB,IAAO,MAAA,CAAA,OAAA,CAAQ,MAAM,UAAU,CAAA,CAAE,QAAQ,CAAC,CAAC,GAAK,EAAA,UAAU,CAAM,KAAA;AAC/D,MAAA,IAAI,OAAO,KAAO,EAAA;AACjB,QAAO,MAAA,CAAA,IAAA;AAAA,UACN,GAAG,WAAY,CAAA,QAAA,CAAU,KAAkC,CAAA,GAAG,GAAG,UAAY,EAAA;AAAA,YAC5E,GAAG,IAAA;AAAA,YACH;AAAA,WACA;AAAA,SACF;AAAA;AACD,KACA,CAAA;AAAA;AAGF,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;ACxCf,IAAME,MAAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4BD,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAOE,cAAQD,GAAAA,MAAAA;;;ACef,IAAM,WAAc,GAAA;AAAA,EACnB,EAAAN,EAAAA,WAAAA;AAAA,EACA,KAAAO,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD,CAAA;;;ACrBA,IAAMN,GAAAA,GAAK,CAAC,KAAA,KACX,KAAU,KAAA,KAAA,CAAA,IACV,KAAU,KAAA,IAAA,IACV,OAAO,KAAA,KAAU,QAChB,IAAA,KAAA,CAAsB,IAAS,KAAA,QAAA;AAEjC,IAAOC,WAAQD,GAAAA,GAAAA;;;ACLf,IAAM,EAAE,UAAAE,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAW,CAAC,KAAA,EAAgB,KAAgB,EAAA,IAAA,GAAiB,EAA0B,KAAA;AAC5F,EAAA,MAAM,SAA4B,EAAC;AAEnC,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,CAACH,WAAG,CAAA,KAAK,CAAG,EAAA;AACf,IAAA,OAAO,CAAC,KAAA,CAAMC,WAAW,CAAA,uBAAuB,CAAC,CAAC,CAAA;AAAA;AAGnD,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC9B,IAAO,OAAA,CAAC,MAAMA,WAAW,CAAA,CAAA,2BAAA,EAA8B,OAAO,KAAK,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGxE,EAAA,IAAI,MAAM,IAAQ,IAAA,CAAC,MAAM,IAAK,CAAA,QAAA,CAAS,KAAe,CAAG,EAAA;AACxD,IAAO,MAAA,CAAA,IAAA,CAAK,KAAMA,CAAAA,WAAAA,CAAW,CAAyB,sBAAA,EAAA,KAAA,CAAM,IAAK,CAAA,IAAA,CAAK,IAAI,CAAC,CAAE,CAAA,CAAC,CAAC,CAAA;AAAA;AAGhF,EAAI,IAAA,KAAA,CAAM,OAAW,IAAA,CAAC,IAAI,MAAA,CAAO,MAAM,OAAO,CAAA,CAAE,IAAK,CAAA,KAAe,CAAG,EAAA;AACtE,IAAO,MAAA,CAAA,IAAA,CAAK,MAAMA,WAAW,CAAA,CAAA,8BAAA,EAAiC,MAAM,OAAO,CAAA,CAAE,CAAC,CAAC,CAAA;AAAA;AAGhF,EAAO,OAAA,MAAA;AACR,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;AC3Bf,IAAME,MAAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4BD,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAOE,cAAQD,GAAAA,MAAAA;;;ACaf,IAAM,WAAc,GAAA;AAAA,EACnB,EAAAN,EAAAA,WAAAA;AAAA,EACA,KAAAO,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD,CAAA;;;ACbA,IAAM,EAAE,UAAAJ,EAAAA,WAAAA,EAAY,MAAAC,KAAM,EAAA,QAAA,EAAAC,WAAa,GAAA,wBAAA;AAEvC,IAAMC,YAAmF,CACxF,KAAA,EACA,KACA,EAAA,IAAA,GAAO,EACH,KAAA;AACJ,EAAA,MAAM,KAAQF,GAAAA,KAAAA,CAAKC,SAAS,CAAA,IAAI,CAAC,CAAA;AAEjC,EAAI,IAAA,UAAA,CAAW,EAAG,CAAA,KAAK,CAAG,EAAA;AACzB,IAAA,OAAO,UAAW,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GACnC,MAAA,IAAA,YAAA,CAAa,EAAG,CAAA,KAAK,CAAG,EAAA;AAClC,IAAA,OAAO,YAAa,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GACrC,MAAA,IAAA,SAAA,CAAU,EAAG,CAAA,KAAK,CAAG,EAAA;AAC/B,IAAA,OAAO,SAAU,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GAClC,MAAA,IAAA,WAAA,CAAY,EAAG,CAAA,KAAK,CAAG,EAAA;AACjC,IAAA,OAAO,WAAY,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GACpC,MAAA,IAAA,WAAA,CAAY,EAAG,CAAA,KAAK,CAAG,EAAA;AACjC,IAAA,OAAO,WAAY,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GACpC,MAAA,IAAA,WAAA,CAAY,EAAG,CAAA,KAAK,CAAG,EAAA;AACjC,IAAA,OAAO,WAAY,CAAA,QAAA,CAAS,KAAO,EAAA,KAAA,EAAO,IAAI,CAAA;AAAA,GACxC,MAAA;AACN,IAAO,OAAA,CAAC,KAAMF,CAAAA,WAAAA,CAAW,CAAiC,8BAAA,EAAA,IAAA,CAAK,UAAU,KAAK,CAAC,CAAE,CAAA,CAAC,CAAC,CAAA;AAAA;AAErF,CAAA;AAEA,IAAOI,iBAAQD,GAAAA,SAAAA;;;AChCf,IAAME,MAAAA,GAAQ,CAAC,KAAgB,EAAA,KAAA,KAA4BD,kBAAS,KAAO,EAAA,KAAK,EAAE,MAAW,KAAA,CAAA;AAE7F,IAAOE,cAAQD,GAAAA,MAAAA;;;ACEf,IAAM,WAAc,GAAA;AAAA,EACnB,KAAAC,EAAAA,cAAAA;AAAA,EACA,QAAAF,EAAAA;AACD","file":"index.js","sourcesContent":["import type { ArrayField } from './index.js';\n\nconst is = (field: unknown): field is ArrayField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as ArrayField).type === 'Array';\n\nexport default is;\n","import { VALIDATION_ERROR_NAME, type ValidationError } from './index.js';\n\nconst create: (params: Omit<ValidationError, 'name' | '__validationError'>) => ValidationError = ({\n\tcause,\n\tmessage,\n\tpath,\n\tstack\n}) =>\n\t({\n\t\tname: VALIDATION_ERROR_NAME,\n\t\tcause,\n\t\tmessage,\n\t\tpath,\n\t\tstack\n\t}) as ValidationError;\n\nexport default create;\n","import { VALIDATION_ERROR_NAME, type ValidationError } from './index.js';\n/**\n * Type guard to check if an error is a `ValidationError`.\n * Runtime check uses name discriminator while TypeScript enforces branded type.\n *\n * @param error - The error to check.\n * @returns `true` if the error is a `ValidationError`, `false` otherwise.\n */\nconst is = (error: unknown): error is ValidationError =>\n\terror !== undefined &&\n\terror !== null &&\n\ttypeof error === 'object' &&\n\t(error as ValidationError).name === VALIDATION_ERROR_NAME &&\n\ttypeof (error as ValidationError).message === 'string';\n\nexport default is;\n","import create from './create.js';\nimport type { ValidationError } from './index.js';\nimport is from './is.js';\n\n/**\n * Converts an unknown error into a `ValidationError`.\n *\n * @param error - The error to convert.\n * @param path - The path to the error.\n */\nconst fromError: (error: Error, path?: readonly string[]) => ValidationError = (\n\terror,\n\tpath = []\n) =>\n\tis(error)\n\t\t? error\n\t\t: create({\n\t\t\t\tcause: error,\n\t\t\t\tmessage: error.message,\n\t\t\t\tpath,\n\t\t\t\tstack: error.stack\n\t\t\t});\n\nexport default fromError;\n","import create from './create.js';\nimport type { ValidationError } from './index.js';\n\n/**\n * Converts an error message into a `ValidationError`.\n *\n * @param error - The error message to convert.\n * @param path - The path to the error.\n */\nconst fromString: (error: string, path?: readonly string[]) => ValidationError = (\n\terror,\n\tpath = []\n) => create({ message: error, path });\n\nexport default fromString;\n","import type { ValidationError } from './index.js';\n\ntype ValidationErrorTransformer = (error: ValidationError) => ValidationError;\n\n/**\n * Composes multiple ValidationError transformers into a single function\n *\n * @param transformers - Array of functions that transform ValidationErrors\n * @returns A single function that applies all transformers in sequence\n */\nconst pipe: (...transformers: ValidationErrorTransformer[]) => ValidationErrorTransformer =\n\t(...transformers) =>\n\t(error) =>\n\t\ttransformers.reduce((acc, transform) => transform(acc), error);\n\nexport type { ValidationErrorTransformer };\nexport default pipe;\n","import type { ValidationErrorTransformer } from './pipe.js';\n\n/**\n * Adds additional context to a ValidationError's message\n *\n * @param context - Additional context to prepend to the error message\n * @returns A transformer function that adds the context\n */\nconst withContext: (context: string) => ValidationErrorTransformer = (context) => (error) => ({\n\t...error,\n\tmessage: `${context}: ${error.message}`\n});\n\nexport default withContext;\n","import type { ValidationErrorTransformer } from './pipe.js';\n\n/**\n * Prepends a path segment to the ValidationError's path\n *\n * @param path - Path segment to prepend\n * @returns A transformer function that prepends the path segment\n */\nconst withPath: (path: readonly string[]) => ValidationErrorTransformer = (path) => (error) => ({\n\t...error,\n\tpath: [...path, ...error.path]\n});\n\nexport default withPath;\n","import create from './create.js';\nimport fromError from './from-error.js';\nimport fromString from './from-string.js';\nimport is from './is.js';\nimport pipe from './pipe.js';\nimport withContext from './with-context.js';\nimport withPath from './with-path.js';\n\nconst VALIDATION_ERROR_NAME = 'ValidationError';\n\ninterface ValidationError extends Error {\n\treadonly name: typeof VALIDATION_ERROR_NAME;\n\treadonly path: readonly string[];\n\treadonly __validationError: unique symbol;\n}\n\nconst validationError = {\n\tcreate,\n\tfromError,\n\tfromString,\n\tis,\n\tpipe,\n\twithContext,\n\twithPath\n} as const;\n\nexport default validationError;\nexport { VALIDATION_ERROR_NAME, type ValidationError };\n","import schemaField from '$lib/schema-field/index.js';\nimport type { ValidationError } from '$lib/validation-error/index.js';\nimport validationError from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected array field'))];\n\t}\n\n\tif (!Array.isArray(value)) {\n\t\treturn [error(fromString(`Expected array value, got ${typeof value}`))];\n\t}\n\n\tif (field.minItems !== undefined && value.length < field.minItems) {\n\t\terrors.push(error(fromString(`Array must contain at least ${field.minItems} items`)));\n\t}\n\n\tif (field.maxItems !== undefined && value.length > field.maxItems) {\n\t\terrors.push(error(fromString(`Array must contain at most ${field.maxItems} items`, path)));\n\t}\n\n\tvalue.forEach((item, index) => {\n\t\terrors.push(...schemaField.validate(item, field.items, [...path, index.toString()]));\n\t});\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import type { SchemaField } from '$lib/schema-field/index.js';\nimport is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tarray: ArrayField;\n\t}\n}\n\ninterface ArrayField {\n\treadonly type: 'Array';\n\treadonly items: SchemaField;\n\treadonly minItems?: number;\n\treadonly maxItems?: number;\n\treadonly default?: readonly unknown[];\n\treadonly __arrayField: unique symbol;\n}\n\nconst arrayField = {\n\tis,\n\tvalid,\n\tvalidate\n} as const;\n\nexport { arrayField as default, type ArrayField };\n","import type { BooleanField } from './index.js';\n\nconst is = (field: unknown): field is BooleanField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as BooleanField).type === 'Boolean';\n\nexport default is;\n","import validationError, { type ValidationError } from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected boolean field'))];\n\t}\n\n\tif (typeof value !== 'boolean') {\n\t\treturn [error(fromString(`Expected boolean value, got ${typeof value}`))];\n\t}\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid: (value: unknown, field: unknown) => boolean = (value, field) =>\n\tvalidate(value, field).length === 0;\n\nexport default valid;\n","import is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ninterface BooleanField {\n\treadonly type: 'Boolean';\n\treadonly default?: boolean;\n\treadonly __booleanField: unique symbol;\n}\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tboolean: BooleanField;\n\t}\n}\n\nconst booleanField = {\n\tis,\n\tvalid,\n\tvalidate\n} as const;\n\nexport { booleanField as default, type BooleanField };\n","import type { DateField } from './index.js';\n\nconst is = (field: unknown): field is DateField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as DateField).type === 'Date';\n\nexport default is;\n","const ISO8601_FORMATS = {\n\tCALENDAR:\n\t\t/^(\\d{4})-([01]\\d)-([0-3]\\d)(?:T([012]\\d):([0-5]\\d):([0-5]\\d)(?:\\.(\\d+))?(Z|([+-])([01]\\d):([0-5]\\d))?)?$/,\n\tORDINAL: /^(\\d{4})-(\\d{3})$/,\n\tWEEK: /^(\\d{4})-W([0-5]\\d)(?:-([1-7]))?$/\n};\n\nconst parseWeekDate: (year: number, week: number, day?: number) => Date = (year, week, day = 1) => {\n\t// January 4th is always in week 1 per ISO-8601\n\tconst jan4th = new Date(year, 0, 4);\n\tconst startOfWeek1 = new Date(jan4th);\n\n\tstartOfWeek1.setDate(jan4th.getDate() - jan4th.getDay() + 1);\n\n\t// Calculate target date\n\tconst targetDate = new Date(startOfWeek1);\n\n\ttargetDate.setDate(startOfWeek1.getDate() + (week - 1) * 7 + (day - 1));\n\n\t// Validate the resulting year is correct\n\tif (targetDate.getFullYear() !== year) {\n\t\tthrow new Error('Invalid week date');\n\t}\n\n\treturn targetDate;\n};\n\nconst parseOrdinalDate: (year: number, ordinalDay: number) => Date = (year, ordinalDay) => {\n\tconst date = new Date(year, 0, 1);\n\n\tdate.setDate(ordinalDay);\n\n\t// Validate the resulting year is correct\n\tif (date.getFullYear() !== year) {\n\t\tthrow new Error('Invalid ordinal date');\n\t}\n\n\treturn date;\n};\n\nconst parseDate: (dateString: string) => Date = (dateString) => {\n\tconst dateMatch = dateString.match(ISO8601_FORMATS.CALENDAR);\n\n\tif (dateMatch) {\n\t\tconst [, y, m, d, h, min, s, ms, tz, o, hoff, minoff] = dateMatch;\n\n\t\tvoid tz;\n\n\t\tconst year = Number(y);\n\t\tconst month = Number(m);\n\t\tconst day = Number(d);\n\t\tconst hour = h ? Number(h) : 0;\n\t\tconst minute = min ? Number(min) : 0;\n\t\tconst second = s ? Number(s) : 0;\n\t\tconst millisecond = ms ? Number(ms) : 0;\n\t\tconst hourOffset = hoff ? Number(`${o}${hoff}`) : 0;\n\t\tconst minuteOffset = minoff ? Number(`${o}${minoff}`) : 0;\n\n\t\tconst date = new Date(dateString);\n\n\t\tif (date instanceof Date === false) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else if (\n\t\t\tdate.getFullYear() !== year ||\n\t\t\tdate.getMonth() + 1 !== month ||\n\t\t\tdate.getDate() !== day ||\n\t\t\tdate.getHours() !== hour - hourOffset ||\n\t\t\tdate.getMinutes() !== minute - minuteOffset ||\n\t\t\tdate.getSeconds() !== second ||\n\t\t\tdate.getMilliseconds() !== millisecond\n\t\t) {\n\t\t\tthrow new Error('Invalid calendar date');\n\t\t} else {\n\t\t\treturn date;\n\t\t}\n\t}\n\n\tconst weekMatch = dateString.match(ISO8601_FORMATS.WEEK);\n\n\tif (weekMatch) {\n\t\tconst [, y, w, d] = weekMatch;\n\n\t\tconst year = Number(y);\n\t\tconst week = Number(w);\n\t\tconst day = d ? Number(d) : 1;\n\n\t\tif (week < 1 || week > 53) {\n\t\t\tthrow new Error('Invalid week number');\n\t\t}\n\n\t\tif (week === 53) {\n\t\t\tconst dec31 = new Date(year, 11, 31);\n\n\t\t\tconst lastWeek =\n\t\t\t\tMath.floor((dec31.getTime() - new Date(year, 0, 1).getTime()) / (86400000 * 7)) + 1;\n\n\t\t\tif (lastWeek !== 53) {\n\t\t\t\tthrow new Error('Invalid week number');\n\t\t\t}\n\t\t}\n\n\t\treturn parseWeekDate(year, week, day);\n\t}\n\n\tconst ordinalMatch = dateString.match(ISO8601_FORMATS.ORDINAL);\n\n\tif (ordinalMatch) {\n\t\tconst [, y, od] = ordinalMatch;\n\n\t\tconst year = Number(y);\n\t\tconst ordinalDay = Number(od);\n\n\t\t// Validate ordinal day number\n\t\tconst isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n\t\tconst maxDays = isLeapYear ? 366 : 365;\n\n\t\tif (ordinalDay < 1 || ordinalDay > maxDays) {\n\t\t\tthrow new Error('Invalid ordinal day number');\n\t\t}\n\n\t\treturn parseOrdinalDate(year, ordinalDay);\n\t}\n\n\tthrow new Error('Invalid ISO-8601 date format');\n};\n\nconst isValidDate: (dateString: string) => boolean = (date) => {\n\ttry {\n\t\treturn parseDate(date) instanceof Date;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nexport { isValidDate, parseDate };\n","import { isValidDate } from '$lib/date-field/date-format/iso8601.js';\nimport type { ValidationError } from '$lib/validation-error/index.js';\nimport validationError from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected date field'))];\n\t}\n\n\tif (typeof value !== 'string') {\n\t\treturn [error(fromString(`Expected date value, got ${typeof value}`))];\n\t}\n\n\tif (field.format === 'ISO-8601' && isValidDate(value) === false) {\n\t\terrors.push(error(fromString('Invalid date format')));\n\t}\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ninterface DateField {\n\treadonly type: 'Date';\n\treadonly format?: 'ISO-8601';\n\treadonly default?: string;\n\treadonly __dateField: unique symbol;\n}\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tdate: DateField;\n\t}\n}\n\nconst dateField = {\n\tis,\n\tvalid,\n\tvalidate\n};\n\nexport { dateField as default, type DateField };\n","import type { NumberField } from './index.js';\n\nconst is = (field: unknown): field is NumberField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as NumberField).type === 'Number';\n\nexport default is;\n","import validationError, { type ValidationError } from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected number field'))];\n\t}\n\n\tif (typeof value !== 'number') {\n\t\treturn [error(fromString(`Expected number value, got ${typeof value}`))];\n\t}\n\n\tif (field.min !== undefined && value < field.min) {\n\t\terrors.push(error(fromString(`Value must be >= ${field.min}`)));\n\t}\n\n\tif (field.max !== undefined && value > field.max) {\n\t\terrors.push(error(fromString(`Value must be <= ${field.max}`)));\n\t}\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ninterface NumberField {\n\treadonly type: 'Number';\n\treadonly min?: number;\n\treadonly max?: number;\n\treadonly default?: number;\n\treadonly __numberField: unique symbol;\n}\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tnumber: NumberField;\n\t}\n}\n\nconst numberField = {\n\tis,\n\tvalid,\n\tvalidate\n};\n\nexport { numberField as default, type NumberField };\n","import type { ObjectField } from './index.js';\n\nconst is = (field: unknown): field is ObjectField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as ObjectField).type === 'Object';\n\nexport default is;\n","import schemaField from '$lib/schema-field/index.js';\nimport type { ValidationError } from '$lib/validation-error/index.js';\nimport validationError from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected object field'))];\n\t}\n\n\tif (value === undefined || value === null || typeof value !== 'object') {\n\t\treturn [error(fromString(`Expected object value, got ${typeof value}`))];\n\t}\n\n\tfield.required?.forEach((requiredProp) => {\n\t\tif (!(requiredProp in value)) {\n\t\t\terrors.push(error(fromString('Required property missing', [...path, requiredProp])));\n\t\t}\n\t});\n\n\tif (field.properties) {\n\t\tObject.entries(field.properties).forEach(([key, propSchema]) => {\n\t\t\tif (key in value) {\n\t\t\t\terrors.push(\n\t\t\t\t\t...schemaField.validate((value as Record<string, unknown>)[key], propSchema, [\n\t\t\t\t\t\t...path,\n\t\t\t\t\t\tkey\n\t\t\t\t\t])\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import type { SchemaField } from '$lib/schema-field/index.js';\nimport is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ninterface ObjectField {\n\treadonly type: 'Object';\n\treadonly properties?: Record<string, SchemaField>;\n\treadonly required?: readonly string[];\n\treadonly default?: Record<string, unknown>;\n\treadonly __objectField: unique symbol;\n}\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tobject: ObjectField;\n\t}\n}\n\nconst objectField = {\n\tis,\n\tvalid,\n\tvalidate\n} as const;\n\nexport { objectField as default, type ObjectField };\n","import type { StringField } from './index.js';\n\nconst is = (field: unknown): field is StringField =>\n\tfield !== undefined &&\n\tfield !== null &&\n\ttypeof field === 'object' &&\n\t(field as StringField).type === 'String';\n\nexport default is;\n","import validationError, { type ValidationError } from '$lib/validation-error/index.js';\nimport is from './is.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate = (value: unknown, field: unknown, path: string[] = []): ValidationError[] => {\n\tconst errors: ValidationError[] = [];\n\n\tconst error = pipe(withPath(path));\n\n\tif (!is(field)) {\n\t\treturn [error(fromString('Expected string field'))];\n\t}\n\n\tif (typeof value !== 'string') {\n\t\treturn [error(fromString(`Expected string value, got ${typeof value}`))];\n\t}\n\n\tif (field.enum && !field.enum.includes(value as string)) {\n\t\terrors.push(error(fromString(`Value must be one of: ${field.enum.join(', ')}`)));\n\t}\n\n\tif (field.pattern && !new RegExp(field.pattern).test(value as string)) {\n\t\terrors.push(error(fromString(`Value does not match pattern: ${field.pattern}`)));\n\t}\n\n\treturn errors;\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import is from './is.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ninterface StringField {\n\treadonly type: 'String';\n\treadonly pattern?: string;\n\treadonly enum?: readonly string[];\n\treadonly default?: string;\n}\n\ndeclare module '$types/schema-field-map.js' {\n\texport interface SchemaFieldMap {\n\t\tstring: StringField;\n\t}\n}\n\nconst stringField = {\n\tis,\n\tvalid,\n\tvalidate\n} as const;\n\nexport { stringField as default, type StringField };\n","import arrayField from '$lib/array-field/index.js';\nimport booleanField from '$lib/boolean-field/index.js';\nimport dateField from '$lib/date-field/index.js';\nimport numberField from '$lib/number-field/index.js';\nimport objectField from '$lib/object-field/index.js';\nimport stringField from '$lib/string-field/index.js';\nimport validationError, { type ValidationError } from '$lib/validation-error/index.js';\n\nconst { fromString, pipe, withPath } = validationError;\n\nconst validate: (value: unknown, field: unknown, path?: string[]) => ValidationError[] = (\n\tvalue,\n\tfield,\n\tpath = []\n) => {\n\tconst error = pipe(withPath(path));\n\n\tif (arrayField.is(field)) {\n\t\treturn arrayField.validate(value, field, path);\n\t} else if (booleanField.is(field)) {\n\t\treturn booleanField.validate(value, field, path);\n\t} else if (dateField.is(field)) {\n\t\treturn dateField.validate(value, field, path);\n\t} else if (numberField.is(field)) {\n\t\treturn numberField.validate(value, field, path);\n\t} else if (objectField.is(field)) {\n\t\treturn objectField.validate(value, field, path);\n\t} else if (stringField.is(field)) {\n\t\treturn stringField.validate(value, field, path);\n\t} else {\n\t\treturn [error(fromString(`No validator found for field: ${JSON.stringify(field)}`))];\n\t}\n};\n\nexport default validate;\n","import validate from './validate.js';\n\nconst valid = (value: unknown, field: unknown): boolean => validate(value, field).length === 0;\n\nexport default valid;\n","import type { SchemaFieldMap } from '$types/schema-field-map.js';\nimport valid from './valid.js';\nimport validate from './validate.js';\n\ntype SchemaField = SchemaFieldMap[keyof SchemaFieldMap];\n\nconst schemaField = {\n\tvalid,\n\tvalidate\n} as const;\n\nexport { schemaField as default, type SchemaField };\n"]}